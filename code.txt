import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class AutomaticBikeTest {

    private AutomaticBike bike;

    @BeforeEach
    public void setup() {
        bike = new AutomaticBike();
    }

    @Test
    public void testBikeCanTurnOn() {
        bike.turnOn();
        assertTrue(bike.isOn());
    }

    @Test
    public void testBikeCanTurnOff() {
        bike.turnOn();
        bike.turnOff();
        assertFalse(bike.isOn());
        assertEquals(0, bike.getSpeed());
        assertEquals(1, bike.getGear());
    }

    @Test
    public void testAccelerateInGearOne() {
        bike.turnOn();
        bike.accelerate();
        assertEquals(1, bike.getSpeed());
        assertEquals(1, bike.getGear());
    }

    @Test
    public void testAccelerateGearChangesAutomatically() {
        bike.turnOn();
        // Accelerate to speed 21, gear should change to 2
        for (int i = 0; i < 21; i++) {
            bike.accelerate();
        }
        assertTrue(bike.getSpeed() >= 21);
        assertEquals(2, bike.getGear());

        // Accelerate to speed 31, gear should change to 3
        while (bike.getSpeed() < 31) {
            bike.accelerate();
        }
        assertEquals(3, bike.getGear());

        // Accelerate to speed 41, gear should change to 4
        while (bike.getSpeed() < 41) {
            bike.accelerate();
        }
        assertEquals(4, bike.getGear());
    }

    @Test
    public void testAccelerateInGearTwo() {
        bike.turnOn();
        // Manually set speed to 21 to be in gear 2 range
        while (bike.getSpeed() < 21) {
            bike.accelerate();
        }
        int initialSpeed = bike.getSpeed();
        int gear = bike.getGear();
        bike.accelerate();
        assertEquals(initialSpeed + gear, bike.getSpeed());
    }

    @Test
    public void testDecelerateInGearOne() {
        bike.turnOn();
        bike.accelerate(); // speed 1, gear 1
        bike.decelerate();
        assertEquals(0, bike.getSpeed());
        assertEquals(1, bike.getGear());
    }

    @Test
    public void testDecelerateGearChangesAutomatically() {
        bike.turnOn();

        // accelerate to speed 41 (gear 4)
        while (bike.getSpeed() < 41) {
            bike.accelerate();
        }
        assertEquals(4, bike.getGear());

        // decelerate and expect gear to go down accordingly
        while (bike.getSpeed() > 0) {
            int previousGear = bike.getGear();
            bike.decelerate();
            int currentGear = bike.getGear();
            // Gear should never increase on deceleration, only decrease or stay same
            assertTrue(currentGear <= previousGear);
        }
        assertEquals(0, bike.getSpeed());
        assertEquals(1, bike.getGear());
    }

    @Test
    public void testSpeedNeverNegative() {
        bike.turnOn();
        bike.decelerate();
        assertEquals(0, bike.getSpeed());
    }
}
